# Set up reference to the XNA game framework

import os
import clr
clr.AddReference('Microsoft.Xna.Framework')
clr.AddReference('Microsoft.Xna.Framework.Game')

# Import the needed packages from XNA
from Microsoft.Xna.Framework import *
from Microsoft.Xna.Framework.Graphics import *
from Microsoft.Xna.Framework.Content import *
from Microsoft.Xna.Framework.Audio import *
from Microsoft.Xna.Framework.Input import *

# Import our custom written classes
from xmlreader import XmlSettings
from rfidreader import RFIDReader

class Sprite(DrawableGameComponent):
	def __new__(self, game, name, rfid, xpos, ypos, width, height, images, sound):
		instance = DrawableGameComponent.__new__(self, game)
		instance.game = game
		instance.name = name
		instance.images = images
		instance.rfid = rfid
		instance.xpos = int(xpos)
		instance.ypos = int(ypos)
		instance.width = int(width)
		instance.height = int(height)
		instance.sound = sound
		return instance

	def LoadGraphicsContent(self, loadAllContent):
		if loadAllContent:
			self.spriteBatch = SpriteBatch(self.game.graphics.GraphicsDevice)
			self.texture = Texture2D.FromFile(self.game.graphics.GraphicsDevice, "images/" + self.images[0])

		
	#def __repr__(self):
	#	return "<Sprite object (RFID: " + self.rfid + ") >"

class MyGame(Game):
	def __init__(self):
		# Load the xml settings file and parse it
		self.xmlconfig = XmlSettings()
		self.xmlconfig.load("settings.xml")
		self.settings = self.xmlconfig.getSettings()
		self.gamedata = self.xmlconfig.getGameData()

	
		self.spriteX = self.spriteY = 0
		self.spriteSpeedX = self.spriteSpeedY = 1
		self.initializeComponent()
		self.counter = 0
		
		self.in_test_mode = False
		self.current_tags = []
		
		self.generateSprites()
		for i in self.Components:
			print i
		
		# Initialize RFID reader as a new Thread object and start it.
		self.reader = RFIDReader(self.settings["com_port"], int(self.settings["baud_rate"]))
		self.reader.start()
		
		if not self.reader.running:
			self.in_test_mode = True

	def initializeComponent(self):
		#Create the managers
		self.graphics = GraphicsDeviceManager(self)
		self.content = ContentManager(self.Services) 
		
		#The size of the window and title
		self.graphics.PreferredBackBufferWidth = int(self.settings["screenwidth"])
		self.graphics.PreferredBackBufferHeight = int(self.settings["screenheight"])
		self.Window.Title = self.settings["gamename"]

	def generateSprites(self):
		for s in self.gamedata:
			print s['name'], s['rfid'], s['xpos'], s['ypos'], s['images'], s['sound']
			s1 = Sprite(self, s['name'], s['rfid'], s['xpos'], s['ypos'], s['width'], s['height'], s['images'], s['sound'])
			self.Components.Add(s1)
			#self.sprites.append(Sprite(self)) #, s['name'], s['rfid'], s['xpos'], s['ypos'], s['images'], s['sound']))

	def update_tags(self):
		if self.in_test_mode:
			self.current_tags =  ["E4410101014",]

	def LoadGraphicsContent(self, loadAllContent):
		if loadAllContent:
			self.spriteBatch = SpriteBatch(self.graphics.GraphicsDevice)
			self.background = Texture2D.FromFile(self.graphics.GraphicsDevice, "images/"+self.settings["background"])
			#self.texture = Texture2D.FromFile(self.graphics.GraphicsDevice, "images/cow.png")

	def UnloadGraphicsContent(self, unloadAllContent):
		if unloadAllContent:
			#self.texture.Dispose()
			self.spritebatch.Dispose()

	def Update(self, gameTime):
		self.counter += gameTime.ElapsedRealTime.TotalMilliseconds
		#print(self.counter)
		Game.Update(self, gameTime)

	def Draw(self, gameTime):
		#On draw, we clear the screen before blitting anything
		self.graphics.GraphicsDevice.Clear(Color.CornflowerBlue)

		self.DrawSprite()
		
		Game.Draw(self, gameTime)
	   
	def DrawSprite(self):
		self.spriteBatch.Begin()
		self.spriteBatch.Draw(self.background, Rectangle(0,0,int(self.settings["screenwidth"]), int(self.settings["screenheight"])), Color.White)
		for s in self.Components:
			self.spriteBatch.Draw(s.texture, Rectangle(s.xpos, s.ypos, s.width, s.height), Color.White)
		self.spriteBatch.End()

if __name__ == "__main__":
	game = MyGame()
	game.Run()